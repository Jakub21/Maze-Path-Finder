from random import randrange
from math import ceil
from PIL import Image

class Maze:
    '''Maze class
    2D list, loaded from image or generated by random.
    Cells only contain values from parameters 'wall' and 'blank'
    '''
    def __init__(self, source, wall=False, blank=True):
        '''Constructor
        Parameters:
        source [2-tuple of ints] OR [str]
            if this parameter is a tuple, a maze will be generated randomly
            if this parameter is a string a maze will be loaded from file
        wall [any]
            Value to put in wall cells
        blank [any]
            Value to put in blank cells
        '''
        self.WALL, self.BLANK = wall, blank
        self.src_type = self.get_src_type(source)
        if self.src_type == 'r':
            self.size = source
            self.board = self.rand_maze()
        elif self.src_type == 'f':
            self.size = self.read_img_size(source)
            self.board = self.load_maze_img()

    def __repr__(self, max_size=(50,50), wall_char='X', blank_char=' ', bound_char='|'):
        '''Representation string of a maze object
        Parameters:
        max_size [2-tuple of ints]
            If maze size exceeds this limit, only info will be shown
        wall_char
            Character to put in cells with Wall value
        blank_char
            Character to put in cells with Blank value
        bound_char
            Character appended to every line
        '''
        width, height = self.size
        maxw, maxh = max_size
        if (width <= maxw) and (height <= maxh):
            text = ''
            for row in self.board:
                for cell in row:
                    if cell == self.WALL: text += wall_char
                    elif cell == self.BLANK: text += blank_char
                text += bound_char+'\n'
        text += 'Maze size: '+str(width)+' x '+str(height)+' cells\n'
        text += 'Maze source: '+str(self.src_type.upper())
        return text

    def get_src_type(self, src):
        '''Check type of source parameter'''
        err_msg = 'Source must be 2-tuple of ints or a path to image'
        if type(src) == str:
            open(src)
            src_type = 'f'
        elif type(src) in (tuple, list):
            try:
                if (type(src[0]) == int) and (type(src[1]) == int):
                    src_type = 'r'
                else: raise TypeError(err_msg)
            except IndexError: raise TypeError(err_msg)
        else: raise TypeError(err_msg)
        return src_type

    def read_img_size(self, path):
        '''Open image and read its size'''
        img = Image.open(path)
        return img.size

    def gen_chunk(self, variant):
        '''There are 11 possible chunks rand_maze can choose from'''
        W, B = self.WALL, self.BLANK
        if   variant == 0 : return[[B,B,B],[W,W,W],[B,B,B]]
        elif variant == 1 : return[[B,W,B],[B,W,B],[B,W,B]]
        elif variant == 2 : return[[B,W,B],[W,W,B],[B,B,B]]
        elif variant == 3 : return[[B,W,B],[B,W,W],[B,B,B]]
        elif variant == 4 : return[[B,B,B],[W,W,B],[B,W,B]]
        elif variant == 5 : return[[B,B,B],[B,W,W],[B,W,B]]
        elif variant == 6 : return[[B,B,B],[W,W,W],[B,W,B]]
        elif variant == 7 : return[[B,W,B],[W,W,W],[B,B,B]]
        elif variant == 8 : return[[B,W,B],[B,W,W],[B,W,B]]
        elif variant == 9 : return[[B,W,B],[W,W,B],[B,W,B]]
        elif variant == 10: return[[B,W,B],[W,W,W],[B,W,B]]

    def rand_maze(self):
        '''Generate random maze'''
        width, height = [el+1 for el in self.size]
        num_of_chunks = ceil(width * height / 9)

        max_chunk_id = 10
        chunks = {id:self.gen_chunk(id) for id in range(max_chunk_id+1)}

        id_list = []
        while len(id_list) < num_of_chunks:
            id_list.append(randrange(max_chunk_id+1))
        id_list = [id_list[x:x+ceil(width/3)] for x in\
            range(0, len(id_list), width//3)] # change list to 2D

        result = []
        for id_row in id_list:
            for row_index in range(3):
                row = []
                for id in id_row: row += chunks[id][row_index]
                row = row[:width]
                result.append(row)
        result = result[:height]

        #result[self.pta[1]][self.pta[0]] = self.BLANK
        #result[self.ptb[1]][self.ptb[0]] = self.BLANK
        return result

    def load_maze_img(self):
        '''Load maze from image'''
        width, height = self.size
        image = Image.open(self.source)
        pixels = image.load()
        result = [[self.BLANK for x in range(width)] for y in range(height)]
        for y in range(height):
            for x in range(width):
                if pixels[x,y] in ((0,0,0), (0,0,0,0)): result[y][x] = self.WALL
        return result
